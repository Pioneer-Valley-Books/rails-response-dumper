#!/usr/bin/env ruby
# frozen_string_literal: true

require 'fileutils'
require 'mime/types'
require 'rspec/mocks'

ENV['RAILS_ENV'] ||= 'test'
require "#{Dir.pwd}/config/environment"

class ResponseDumper
  include ActionDispatch::Integration::Runner
  include ActiveSupport::Testing::TimeHelpers
  include RSpec::Mocks::ExampleMethods

  attr_reader :expected_status_code

  def self.inherited(subclass)
    super
    dumpers << subclass
  end

  def self.dumpers
    @dumpers ||= []
  end

  def self.reset_models(*models)
    @reset_models ||= []
    @reset_models += models
  end

  def self.reset_models!
    reset_models.each do |model|
      model.connection.exec_query "TRUNCATE #{model.quoted_table_name} RESTART IDENTITY CASCADE"
    end
  end

  # Delegates to `Rails.application`.
  def app
    Rails.application
  end

  def expect_status_code!(status_code)
    @expected_status_code = Rack::Utils::SYMBOL_TO_STATUS_CODE[status_code]
  end

  def responses
    @responses ||= []
  end

  def mock_setup
    RSpec::Mocks.setup
  end

  def mock_teardown
    RSpec::Mocks.verify
  ensure
    RSpec::Mocks.teardown
  end

  [:get, :post, :patch, :put, :head, :delete].each do |method|
    module_eval <<~RUBY, __FILE__, __LINE__ + 1
      def #{method}(...)
        result = super
        self.responses << response
        result
      end
    RUBY
  end

  # The list of methods is too long to be useful so shorten to just the class
  # name.
  def inspect
    "#<#{self.class.name}>"
  end
end

def run_dumps
  dumps_dir = Rails.root.join('dumps')
  FileUtils.rm_rf dumps_dir
  FileUtils.mkdir_p dumps_dir

  Dir[Rails.root.join('dumpers/**/*.rb')].each { |f| require f }

  ResponseDumper.dumpers.each do |klass|
    klass.instance_methods.each do |method|
      next unless method.start_with?('dump_')

      klass.reset_models!

      dumper = klass.new
      dumper.mock_setup
      begin
        ActiveRecord::Base.transaction do
          dumper.expect_status_code!(:ok)
          dumper.send(method)
          raise ActiveRecord::Rollback
        end
      ensure
        dumper.mock_teardown
      end

      klass_path = klass.name.underscore
      dumper_dir = "#{dumps_dir}/#{klass_path}/#{method}"
      FileUtils.mkdir_p dumper_dir

      dumper.responses.each_with_index do |response, index|
        unless response.status == dumper.expected_status_code
          raise <<~ERROR.squish
            Dumped response has unexpected status code #{response.status} #{response.status_message}
            (expected #{dumper.expected_status_code})
          ERROR
        end

        mime = response.content_type.split(/ *; */).first
        extension = MIME::Types[mime].first.preferred_extension
        File.write("#{dumper_dir}/#{index}.#{extension}", response.body)
      end
    end
  end
end

# Prevent database truncation if the environment is production.
abort 'The Rails environment is running in production mode!' if Rails.env.production?
ActiveRecord::Migration.maintain_test_schema!
run_dumps
